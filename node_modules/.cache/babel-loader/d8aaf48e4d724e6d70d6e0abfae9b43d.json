{"ast":null,"code":"import _objectSpread from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\testAI\\\\bnk48-face-recognition-master\\\\src\\\\views\\\\faceRecognition.js\";\nimport React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { loadModels, getFullFaceDescription, createMatcher, isFaceDetectionModelLoaded } from '../api/face';\nimport DrawBox from '../components/drawBox';\nimport ShowDescriptors from '../components/showDescriptors';\nimport { JSON_PROFILE } from '../common/profile';\nvar MaxWidth = 600;\nvar boxColor = '#BE80B5'; // const testImg = require('../img/test.jpg');\n\nvar INIT_STATE = {\n  url: null,\n  imageURL: null,\n  fullDesc: null,\n  imageDimension: null,\n  error: null,\n  loading: false\n};\n\nvar FaceRecognition =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(FaceRecognition, _Component);\n\n  function FaceRecognition(props) {\n    var _this;\n\n    _classCallCheck(this, FaceRecognition);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(FaceRecognition).call(this, props));\n    _this.matcher =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var faceMatcher;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return createMatcher(JSON_PROFILE);\n\n            case 2:\n              faceMatcher = _context.sent;\n\n              _this.setState({\n                faceMatcher: faceMatcher\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    _this.handleFileChange =\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(event) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this.resetState();\n\n                _context2.next = 3;\n                return _this.setState({\n                  imageURL: URL.createObjectURL(event.target.files[0]),\n                  loading: true\n                });\n\n              case 3:\n                _this.handleImageChange();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this.handleURLChange = function (event) {\n      _this.setState({\n        url: event.target.value\n      });\n    };\n\n    _this.handleButtonClick =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var blob;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.resetState();\n\n              _context3.next = 3;\n              return fetch(_this.state.url).then(function (r) {\n                return r.blob();\n              }).catch(function (error) {\n                return _this.setState({\n                  error: error\n                });\n              });\n\n            case 3:\n              blob = _context3.sent;\n\n              if (!!blob && blob.type.includes('image')) {\n                _this.setState({\n                  imageURL: URL.createObjectURL(blob),\n                  loading: true\n                });\n\n                _this.handleImageChange();\n              }\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.handleImageChange =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var image,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              image = _args4.length > 0 && _args4[0] !== undefined ? _args4[0] : _this.state.imageURL;\n              _context4.next = 3;\n              return _this.getImageDimension(image);\n\n            case 3:\n              _context4.next = 5;\n              return getFullFaceDescription(image).then(function (fullDesc) {\n                _this.setState({\n                  fullDesc: fullDesc,\n                  loading: false\n                });\n              });\n\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    _this.getImageDimension = function (imageURL) {\n      var img = new Image();\n\n      img.onload = function () {\n        var HEIGHT = _this.state.WIDTH * img.height / img.width;\n\n        _this.setState({\n          HEIGHT: HEIGHT,\n          imageDimension: {\n            width: img.width,\n            height: img.height\n          }\n        });\n      };\n\n      img.src = imageURL;\n    };\n\n    _this.handleDescriptorsCheck = function (event) {\n      _this.setState({\n        showDescriptors: event.target.checked\n      });\n    };\n\n    _this.resetState = function () {\n      _this.setState(_objectSpread({}, INIT_STATE));\n    };\n\n    _this.state = _objectSpread({}, INIT_STATE, {\n      faceMatcher: null,\n      showDescriptors: false,\n      WIDTH: null,\n      HEIGHT: 0,\n      isModelLoaded: !!isFaceDetectionModelLoaded()\n    });\n    return _this;\n  }\n\n  _createClass(FaceRecognition, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.resetState();\n      var _W = document.documentElement.clientWidth;\n      if (_W > MaxWidth) _W = MaxWidth;\n      this.setState({\n        WIDTH: _W\n      }); // this.mounting();\n    } // mounting = async () => {\n    //   await loadModels();\n    //   await this.matcher();\n    //   await this.getImageDimension(testImg);\n    //   await this.setState({ imageURL: testImg, loading: true });\n    //   await this.handleImageChange(testImg);\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          WIDTH = _this$state.WIDTH,\n          HEIGHT = _this$state.HEIGHT,\n          imageURL = _this$state.imageURL,\n          fullDesc = _this$state.fullDesc,\n          faceMatcher = _this$state.faceMatcher,\n          showDescriptors = _this$state.showDescriptors,\n          isModelLoaded = _this$state.isModelLoaded,\n          error = _this$state.error,\n          loading = _this$state.loading; // Display working status\n\n      var status = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \" Status: Model Loaded = \", isModelLoaded.toString(), \" \");\n\n      if (!!error && error.toString() === 'TypeError: Failed to fetch') {\n        status = React.createElement(\"p\", {\n          style: {\n            color: 'red'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, \" Status: Error Failed to fetch Image URL \");\n      } else if (loading) {\n        status = React.createElement(\"p\", {\n          style: {\n            color: 'blue'\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \" Status: LOADING... \");\n      } else if (!!fullDesc && !!imageURL && !loading) {\n        if (fullDesc.length < 2) status = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 141\n          },\n          __self: this\n        }, \" Status: \", fullDesc.length, \"Face Detect \");\n        if (fullDesc.length > 1) status = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144\n          },\n          __self: this\n        }, \" Status: \", fullDesc.length, \"Faces Detect \");\n      } // Loading Spinner\n\n\n      var spinner = React.createElement(\"div\", {\n        style: {\n          margin: 0,\n          color: '#BE80B5',\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          transform: 'translate(-50%,-50%)',\n          textShadow: '2px 2px 3px #fff'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"loading\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \" Processing... \"), \" \");\n      return React.createElement(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, status, \" \", React.createElement(\"div\", {\n        style: {\n          position: 'relative',\n          width: WIDTH,\n          height: HEIGHT\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, !!imageURL ? React.createElement(\"div\", {\n        style: {\n          position: 'relative'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          position: 'absolute'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        style: {\n          width: WIDTH\n        },\n        src: imageURL,\n        alt: \"imageURL\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      })), \" \", !!fullDesc ? React.createElement(DrawBox, {\n        fullDesc: fullDesc,\n        faceMatcher: faceMatcher,\n        imageWidth: WIDTH,\n        boxColor: boxColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }) : null, \" \") : null, \" \", loading ? spinner : null, \" \"), \" \", React.createElement(\"div\", {\n        style: {\n          width: WIDTH,\n          padding: 10,\n          border: 'solid',\n          marginTop: 10\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }, \" Input Image file or URL \"), \" \", React.createElement(\"input\", {\n        id: \"myFileUpload\",\n        type: \"file\",\n        onChange: this.handleFileChange,\n        accept: \".jpg, .jpeg, .png\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"URLInput\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"url\",\n        name: \"url\",\n        id: \"url\",\n        placeholder: \"Place your photo URL here (only .jpg, .jpeg, .png)\",\n        pattern: \"https://.*\",\n        size: \"30\",\n        onChange: this.handleURLChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), \" \", React.createElement(\"button\", {\n        onClick: this.handleButtonClick,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \" Upload \"), \" \"), \" \", React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        name: \"descriptors\",\n        type: \"checkbox\",\n        checked: this.state.showDescriptors,\n        onChange: this.handleDescriptorsCheck,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }), \" \", React.createElement(\"label\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      }, \" Show Descriptors \"), \" \"), \" \", !!showDescriptors ? React.createElement(ShowDescriptors, {\n        fullDesc: fullDesc,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251\n        },\n        __self: this\n      }) : null, \" \"), \" \");\n    }\n  }]);\n\n  return FaceRecognition;\n}(Component);\n\nexport default withRouter(FaceRecognition);","map":{"version":3,"sources":["D:\\testAI\\bnk48-face-recognition-master\\src\\views\\faceRecognition.js"],"names":["React","Component","withRouter","loadModels","getFullFaceDescription","createMatcher","isFaceDetectionModelLoaded","DrawBox","ShowDescriptors","JSON_PROFILE","MaxWidth","boxColor","INIT_STATE","url","imageURL","fullDesc","imageDimension","error","loading","FaceRecognition","props","matcher","faceMatcher","setState","handleFileChange","event","resetState","URL","createObjectURL","target","files","handleImageChange","handleURLChange","value","handleButtonClick","fetch","state","then","r","blob","catch","type","includes","image","getImageDimension","img","Image","onload","HEIGHT","WIDTH","height","width","src","handleDescriptorsCheck","showDescriptors","checked","isModelLoaded","_W","document","documentElement","clientWidth","status","toString","color","length","spinner","margin","position","top","left","transform","textShadow","display","flexDirection","alignItems","padding","border","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport {\n    loadModels,\n    getFullFaceDescription,\n    createMatcher,\n    isFaceDetectionModelLoaded\n} from '../api/face';\nimport DrawBox from '../components/drawBox';\nimport ShowDescriptors from '../components/showDescriptors';\nimport { JSON_PROFILE } from '../common/profile';\n\nconst MaxWidth = 600;\nconst boxColor = '#BE80B5';\n// const testImg = require('../img/test.jpg');\n\nconst INIT_STATE = {\n    url: null,\n    imageURL: null,\n    fullDesc: null,\n    imageDimension: null,\n    error: null,\n    loading: false\n};\n\nclass FaceRecognition extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            ...INIT_STATE,\n            faceMatcher: null,\n            showDescriptors: false,\n            WIDTH: null,\n            HEIGHT: 0,\n            isModelLoaded: !!isFaceDetectionModelLoaded()\n        };\n    }\n\n    componentWillMount() {\n        this.resetState();\n        let _W = document.documentElement.clientWidth;\n        if (_W > MaxWidth) _W = MaxWidth;\n        this.setState({ WIDTH: _W });\n        // this.mounting();\n    }\n\n    // mounting = async () => {\n    //   await loadModels();\n    //   await this.matcher();\n    //   await this.getImageDimension(testImg);\n    //   await this.setState({ imageURL: testImg, loading: true });\n    //   await this.handleImageChange(testImg);\n    // };\n\n    matcher = async() => {\n        const faceMatcher = await createMatcher(JSON_PROFILE);\n        this.setState({ faceMatcher });\n    };\n\n    handleFileChange = async event => {\n        this.resetState();\n        await this.setState({\n            imageURL: URL.createObjectURL(event.target.files[0]),\n            loading: true\n        });\n        this.handleImageChange();\n    };\n\n    handleURLChange = event => {\n        this.setState({ url: event.target.value });\n    };\n\n    handleButtonClick = async() => {\n        this.resetState();\n        let blob = await fetch(this.state.url)\n            .then(r => r.blob())\n            .catch(error => this.setState({ error }));\n        if (!!blob && blob.type.includes('image')) {\n            this.setState({\n                imageURL: URL.createObjectURL(blob),\n                loading: true\n            });\n            this.handleImageChange();\n        }\n    };\n\n    handleImageChange = async(image = this.state.imageURL) => {\n        await this.getImageDimension(image);\n        await getFullFaceDescription(image).then(fullDesc => {\n            this.setState({ fullDesc, loading: false });\n        });\n    };\n\n    getImageDimension = imageURL => {\n        let img = new Image();\n        img.onload = () => {\n            let HEIGHT = (this.state.WIDTH * img.height) / img.width;\n            this.setState({\n                HEIGHT,\n                imageDimension: {\n                    width: img.width,\n                    height: img.height\n                }\n            });\n        };\n        img.src = imageURL;\n    };\n\n    handleDescriptorsCheck = event => {\n        this.setState({ showDescriptors: event.target.checked });\n    };\n\n    resetState = () => {\n        this.setState({...INIT_STATE });\n    };\n    render() {\n        const {\n            WIDTH,\n            HEIGHT,\n            imageURL,\n            fullDesc,\n            faceMatcher,\n            showDescriptors,\n            isModelLoaded,\n            error,\n            loading\n        } = this.state;\n\n        // Display working status\n        let status = < p > Status: Model Loaded = { isModelLoaded.toString() } < /p>;\n        if (!!error && error.toString() === 'TypeError: Failed to fetch') {\n            status = ( <\n                p style = {\n                    { color: 'red' } } > Status: Error Failed to fetch Image URL < /p>\n            );\n        } else if (loading) {\n            status = < p style = {\n                { color: 'blue' } } > Status: LOADING... < /p>;\n        } else if (!!fullDesc && !!imageURL && !loading) {\n            if (fullDesc.length < 2)\n                status = < p > Status: { fullDesc.length }\n            Face Detect < /p>;\n            if (fullDesc.length > 1)\n                status = < p > Status: { fullDesc.length }\n            Faces Detect < /p>;\n        }\n\n        // Loading Spinner\n        let spinner = ( <\n            div style = {\n                {\n                    margin: 0,\n                    color: '#BE80B5',\n                    position: 'absolute',\n                    top: '50%',\n                    left: '50%',\n                    transform: 'translate(-50%,-50%)',\n                    textShadow: '2px 2px 3px #fff'\n                }\n            } >\n            <\n            div className = \"loading\" / >\n            <\n            h3 > Processing... < /h3> <\n            /div>\n        );\n\n        return ( <\n            div style = {\n                {\n                    display: 'flex',\n                    flexDirection: 'column',\n                    alignItems: 'center'\n                }\n            } >\n            { status } <\n            div style = {\n                {\n                    position: 'relative',\n                    width: WIDTH,\n                    height: HEIGHT\n                }\n            } >\n            {!!imageURL ? ( <\n                    div style = {\n                        {\n                            position: 'relative'\n                        }\n                    } >\n                    <\n                    div style = {\n                        { position: 'absolute' } } >\n                    <\n                    img style = {\n                        { width: WIDTH } }\n                    src = { imageURL }\n                    alt = \"imageURL\" / >\n                    <\n                    /div> {\n                        !!fullDesc ? ( <\n                            DrawBox fullDesc = { fullDesc }\n                            faceMatcher = { faceMatcher }\n                            imageWidth = { WIDTH }\n                            boxColor = { boxColor }\n                            />\n                        ) : null\n                    } <\n                    /div>\n                ) : null\n            } { loading ? spinner : null } <\n            /div> <\n            div style = {\n                {\n                    width: WIDTH,\n                    padding: 10,\n                    border: 'solid',\n                    marginTop: 10\n                }\n            } >\n            <\n            p > Input Image file or URL < /p> <\n            input id = \"myFileUpload\"\n            type = \"file\"\n            onChange = { this.handleFileChange }\n            accept = \".jpg, .jpeg, .png\" /\n            >\n            <\n            br / >\n            <\n            div className = \"URLInput\" >\n            <\n            input type = \"url\"\n            name = \"url\"\n            id = \"url\"\n            placeholder = \"Place your photo URL here (only .jpg, .jpeg, .png)\"\n            pattern = \"https://.*\"\n            size = \"30\"\n            onChange = { this.handleURLChange }\n            /> <\n            button onClick = { this.handleButtonClick } > Upload < /button> <\n            /div> <\n            div >\n            <\n            input name = \"descriptors\"\n            type = \"checkbox\"\n            checked = { this.state.showDescriptors }\n            onChange = { this.handleDescriptorsCheck }\n            /> <\n            label > Show Descriptors < /label> <\n            /div> {\n                !!showDescriptors ? < ShowDescriptors fullDesc = { fullDesc }\n                /> : null} <\n                /div> <\n                /div>\n            );\n        }\n    }\n\n    export default withRouter(FaceRecognition);"]},"metadata":{},"sourceType":"module"}