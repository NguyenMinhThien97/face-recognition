{"ast":null,"code":"import * as tslib_1 from \"tslib\";\nimport * as tf from '@tensorflow/tfjs-core';\nimport { normalize } from 'tfjs-image-recognition-base';\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { FaceLandmark68NetBase } from './FaceLandmark68NetBase';\nimport { fullyConnectedLayer } from './fullyConnectedLayer';\n\nfunction denseBlock(x, denseBlockParams, isFirstLayer) {\n  if (isFirstLayer === void 0) {\n    isFirstLayer = false;\n  }\n\n  return tf.tidy(function () {\n    var out1 = tf.relu(isFirstLayer ? tf.add(tf.conv2d(x, denseBlockParams.conv0.filters, [2, 2], 'same'), denseBlockParams.conv0.bias) : depthwiseSeparableConv(x, denseBlockParams.conv0, [2, 2]));\n    var out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1]);\n    var in3 = tf.relu(tf.add(out1, out2));\n    var out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1]);\n    var in4 = tf.relu(tf.add(out1, tf.add(out2, out3)));\n    var out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [1, 1]);\n    return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4))));\n  });\n}\n\nvar FaceLandmark68Net =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(FaceLandmark68Net, _super);\n\n  function FaceLandmark68Net() {\n    return _super.call(this, 'FaceLandmark68Net') || this;\n  }\n\n  FaceLandmark68Net.prototype.runNet = function (input) {\n    var params = this.params;\n\n    if (!params) {\n      throw new Error('FaceLandmark68Net - load model before inference');\n    }\n\n    return tf.tidy(function () {\n      var batchTensor = input.toBatchTensor(112, true);\n      var meanRgb = [122.782, 117.001, 104.298];\n      var normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255));\n      var out = denseBlock(normalized, params.dense0, true);\n      out = denseBlock(out, params.dense1);\n      out = denseBlock(out, params.dense2);\n      out = denseBlock(out, params.dense3);\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid');\n      return fullyConnectedLayer(out.as2D(out.shape[0], -1), params.fc);\n    });\n  };\n\n  FaceLandmark68Net.prototype.getDefaultModelName = function () {\n    return 'face_landmark_68_model';\n  };\n\n  FaceLandmark68Net.prototype.extractParamsFromWeigthMap = function (weightMap) {\n    return extractParamsFromWeigthMap(weightMap);\n  };\n\n  FaceLandmark68Net.prototype.extractParams = function (weights) {\n    return extractParams(weights);\n  };\n\n  return FaceLandmark68Net;\n}(FaceLandmark68NetBase);\n\nexport { FaceLandmark68Net };","map":null,"metadata":{},"sourceType":"module"}